"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5401],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>x});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,x=d["".concat(s,".").concat(u)]||d[u]||f[u]||o;return n?r.createElement(x,a(a({ref:t},p),{},{components:n})):r.createElement(x,a({ref:t},p))}));function x(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3},a="CSS-Flexbox",l={unversionedId:"Front End/Basics/css-flexbox",id:"Front End/Basics/css-flexbox",title:"CSS-Flexbox",description:"Flexbox is a layout method for arranging items in rows or columns. Items flex (expand) to fill additional space or shrink to fit into smaller spaces.",source:"@site/docs/Front End/Basics/css-flexbox.md",sourceDirName:"Front End/Basics",slug:"/Front End/Basics/css-flexbox",permalink:"/docs/Front End/Basics/css-flexbox",draft:!1,editUrl:"https://github.com/Boston343/web-dev-docs/docs/Front End/Basics/css-flexbox.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CSS",permalink:"/docs/Front End/Basics/css-basics"},next:{title:"Javascript",permalink:"/docs/Front End/Basics/js-basics"}},s={},c=[{value:"Using Flexbox",id:"using-flexbox",level:2},{value:"justify-content",id:"justify-content",level:2},{value:"align-items",id:"align-items",level:2},{value:"flex-direction",id:"flex-direction",level:2},{value:"order",id:"order",level:2},{value:"Flexbox Growing and Shrinking",id:"flexbox-growing-and-shrinking",level:2},{value:"flex-basis",id:"flex-basis",level:3},{value:"flex-grow",id:"flex-grow",level:3},{value:"flex-shrink",id:"flex-shrink",level:3},{value:"gap",id:"gap",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"css-flexbox"},"CSS-Flexbox"),(0,i.kt)("p",null,"Flexbox is a layout method for arranging items in rows or columns. Items ",(0,i.kt)("em",{parentName:"p"},"flex")," (expand) to fill additional space or shrink to fit into smaller spaces."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Here is a ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=3YW65K6LcIA"},"crash course")," I followed to learn Flexbox basics.")),(0,i.kt)("h2",{id:"using-flexbox"},"Using Flexbox"),(0,i.kt)("p",null,"Start with a class to make flexbox. Ex ",(0,i.kt)("inlineCode",{parentName:"p"},'class="flex-container"'),". In CSS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},".flex-container {\n  display: flex; /* this makes it a flex entity */\n}\n")),(0,i.kt)("h2",{id:"justify-content"},"justify-content"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"justify-content")," changes how the boxes are spaced along the main axis (default is horizontally). Ex. ",(0,i.kt)("inlineCode",{parentName:"p"},"center, end, space-around, space-between")),(0,i.kt)("h2",{id:"align-items"},"align-items"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"align-items")," changes how the boxes are aligned in the cross axis (default is vertically). Ex. ",(0,i.kt)("inlineCode",{parentName:"p"},"end, center")),(0,i.kt)("h2",{id:"flex-direction"},"flex-direction"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flex-direction")," changes the direction. Default is ",(0,i.kt)("inlineCode",{parentName:"p"},"row"),", other main option is ",(0,i.kt)("inlineCode",{parentName:"p"},"column"),". Ex. ",(0,i.kt)("inlineCode",{parentName:"p"},"row, column, row-reverse, column-reverse")),(0,i.kt)("h2",{id:"order"},"order"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"order")," allows you to change the order of elements in a flex box, without changing the ordering in the HTML."),(0,i.kt)("h2",{id:"flexbox-growing-and-shrinking"},"Flexbox Growing and Shrinking"),(0,i.kt)("h3",{id:"flex-basis"},"flex-basis"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flex-basis")," is the same as width for normal elements."),(0,i.kt)("h3",{id:"flex-grow"},"flex-grow"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flex-grow")," is a factor of flex item main size. This is specified as a number. It's basically a growth rate."),(0,i.kt)("h3",{id:"flex-shrink"},"flex-shrink"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flex-shrink")," is the shrink rate. Will only go smaller than your ",(0,i.kt)("inlineCode",{parentName:"p"},"flex-basis"),". Opposite of ",(0,i.kt)("inlineCode",{parentName:"p"},"flex-grow")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},"/* flex: {grow} {shrink} {basis}; */\n\n/* sets grow rate to 1, shrink rate of 0, and basis of 100px */\nflex: 1 0 100px;\n\n/* this is what happens a lot of the time, just take up the space necessary */\nflex: 1 0 0;\n\n/* shorthand of the above */\nflex: 1;\n")),(0,i.kt)("h2",{id:"gap"},"gap"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gap")," functions like margin except it is only between flexbox elements. Good demonstration ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://coryrylan.com/blog/css-gap-space-with-flexbox"},"here"))))}d.isMDXComponent=!0}}]);