"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3652],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var o=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=o.createContext({}),m=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=m(e.components);return o.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=m(t),u=s,g=c["".concat(l,".").concat(u)]||c[u]||p[u]||r;return t?o.createElement(g,a(a({ref:n},d),{},{components:t})):o.createElement(g,a({ref:n},d))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,a=new Array(r);a[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:s,a[1]=i;for(var m=2;m<r;m++)a[m]=t[m];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8553:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var o=t(7462),s=(t(7294),t(3905));const r={sidebar_position:4},a="Mongoose",i={unversionedId:"Back End/Databases/mongoose",id:"Back End/Databases/mongoose",title:"Mongoose",description:"Popular node library for using MongoDB.",source:"@site/docs/Back End/Databases/mongoose.md",sourceDirName:"Back End/Databases",slug:"/Back End/Databases/mongoose",permalink:"/docs/Back End/Databases/mongoose",draft:!1,editUrl:"https://github.com/Boston343/web-dev-docs/docs/Back End/Databases/mongoose.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"MongoDB",permalink:"/docs/Back End/Databases/mongodb"},next:{title:"APIs",permalink:"/docs/api"}},l={},m=[{value:"Mongoose Installation",id:"mongoose-installation",level:2},{value:"Connecting to Local MongoDB",id:"connecting-to-local-mongodb",level:2},{value:"Mongoose CRUD",id:"mongoose-crud",level:2},{value:"CREATE",id:"create",level:3},{value:"READ",id:"read",level:3},{value:"DATA VALIDATION",id:"data-validation",level:3},{value:"UPDATE",id:"update",level:3},{value:"DELETE",id:"delete",level:3},{value:"Mongoose Relationships",id:"mongoose-relationships",level:2},{value:"Example Project",id:"example-project",level:2}],d={toc:m};function c(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"mongoose"},"Mongoose"),(0,s.kt)("p",null,"Popular node library for using MongoDB."),(0,s.kt)("h2",{id:"mongoose-installation"},"Mongoose Installation"),(0,s.kt)("p",null,"After creating your project, use ",(0,s.kt)("inlineCode",{parentName:"p"},"npm i mongoose")," to install it for the project."),(0,s.kt)("h2",{id:"connecting-to-local-mongodb"},"Connecting to Local MongoDB"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// this will connect to the db "fruitsDB", and will create it if it doesn\'t already exist\nmongoose.connect("mongodb://localhost:27017/fruitsDB", {\n  useNewUrlParser: true,\n});\n')),(0,s.kt)("h2",{id:"mongoose-crud"},"Mongoose CRUD"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"insertMany()")," and other model function ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://mongoosejs.com/docs/api/model.html"},"here")),"."),(0,s.kt)("h3",{id:"create"},"CREATE"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import mongoose from "mongoose";\n\n// this will connect to the db "fruitsDB", and will create it if it doesn\'t already exist\nmongoose.connect("mongodb://localhost:27017/fruitsDB", {\n  useNewUrlParser: true,\n});\n\nconst fruitSchema = new mongoose.Schema({\n  name: String,\n  rating: Number,\n  review: String,\n});\n\n// mongoose will auto make it plural "fruits"\nconst Fruit = mongoose.model("Fruit", fruitSchema);\n\nconst fruit = new Fruit({\n  name: "Apple",\n  rating: 7,\n  review: "Pretty solid fruit.",\n});\n\n// save your new fruit into the database\nfruit.save();\n')),(0,s.kt)("h3",{id:"read"},"READ"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// display all in collection "fruits"\nFruit.find((err, fruits) => {\n  if (err) {\n    console.log(err);\n  } else {\n    mongoose.connection.close(); // this is how you close the db connection\n\n    fruits.forEach((fruit) => {\n      console.log(fruit.name);\n    });\n  }\n});\n')),(0,s.kt)("h3",{id:"data-validation"},"DATA VALIDATION"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://mongoosejs.com/docs/validation.html"},"docs"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const fruitSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    // could have [true, "this is message for when validation fails"]\n  },\n  rating: {\n    type: Number,\n    min: 1,\n    max: 10,\n  },\n  review: String,\n});\n')),(0,s.kt)("h3",{id:"update"},"UPDATE"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://mongoosejs.com/docs/api/model.html#model_Model-update"},"docs"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// update the rating of "banana" to 9\nFruit.updateOne({ name: "banana" }, { rating: 9 }, (err) => {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log("Successfully updated the document");\n  }\n});\n')),(0,s.kt)("h3",{id:"delete"},"DELETE"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://mongoosejs.com/docs/api/model.html#model_Model-deleteOne"},"docs"))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Model.deleteOne()")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"deleteMany()")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// deleteOne() example. This is synchronous and uses "await" rather than a callback function\nconst deleted = await Fruit.deleteOne({ name: "Apple" });\nif (deleted.deletedCount === 1) {\n  console.log("Apple was deleted.");\n} else {\n  console.log("There was an error and Apple was not deleted.");\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// deleteMany() example\nconst deletedPeople = await Person.deleteMany({ name: "John" });\nif (deletedPeople.deletedCount >= 1) {\n  console.log(deletedPeople.deletedCount + " Johns were deleted.");\n} else {\n  console.log("There was an error and Johns were not deleted.");\n}\n')),(0,s.kt)("h2",{id:"mongoose-relationships"},"Mongoose Relationships"),(0,s.kt)("p",null,"Easiest option is to add as a sub-document. If you add the fruit and the person in the same run, the ObjectId will be the same."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const peopleSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  favoriteFruit: fruitSchema,\n});\nconst amy = new Person({\n  name: "Amy",\n  age: 12,\n  favoriteFruit: banana,\n});\n')),(0,s.kt)("h2",{id:"example-project"},"Example Project"),(0,s.kt)("p",null,"For an example project, see TodoList ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://github.com/Boston343/TodoList"},"code")),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodoList: app.js"',title:'"TodoList:','app.js"':!0},'// npm and express includes\nimport express from "express";\nimport mongoose from "mongoose";\nimport dotenv from "dotenv";\nimport path from "path";\nimport { fileURLToPath } from "url";\nimport _ from "lodash";\n// import https from "https"; // for forming external get requests\n\n// local includes\nimport * as date from "./src/date.js";\n\ndotenv.config(); // gets the .env data for use with process.env.\nconst app = express();\napp.set("view engine", "ejs"); // using EJS\nconst port = process.env.PORT || 3000;\napp.use(express.urlencoded({ extended: true })); // this is for parsing data from html form\n\n// __dirname is only available with CJS. Since I am using ESM I need to get it another way\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// static items like other js or css files will not load unless you define where the server should\n//      start looking for those files.\napp.use(express.static(path.join(__dirname, "/public")));\n\n// -----------------------------------------------------------------------------------\n// ------------------------------- Mongoose Setup ------------------------------------\n// -----------------------------------------------------------------------------------\n// connect to MongoDB - local connection\n// mongoose.connect("mongodb://localhost:27017/todolistDB", {\n//     useNewUrlParser: true,\n// });\n// connect to MongoDB Atlas (the cloud)\nmongoose.connect(\n  "mongodb+srv://" +\n    process.env.MONGODB_USER +\n    ":" +\n    process.env.MONGODB_PASS +\n    "@cluster0.ovomich.mongodb.net/todolistDB?retryWrites=true&w=majority",\n  {\n    useNewUrlParser: true,\n  }\n);\n\n// schema\nconst itemSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: [true, "Please type something in for your item name."],\n  },\n});\n\nconst listSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  items: [itemSchema],\n});\n\n// model: mongoose will auto make it plural "items"\nconst Item = mongoose.model("Item", itemSchema);\n\nconst List = mongoose.model("List", listSchema);\n\n// -----------------------------------------------------------------------------------\n// testing\n\n// remove all items\n// synchronous version\n// const deleted = await Item.deleteMany({});\n// if (deleted.deletedCount >= 1) {\n//     console.log("Deleted " + deleted.deletedCount + " items.");\n// } else {\n//     console.log("ERROR in deleting items. No items deleted.");\n// }\n\n// async version\n// Item.deleteMany({}, (err, ret) => {\n//     if (err) {\n//         console.log(err);\n//     } else {\n//         console.log("Deleted " + ret.deletedCount + " items.");\n//     }\n// });\n\nconst item1 = new Item({\n  name: "Welcome to your todo list!",\n});\n\nconst item2 = new Item({\n  name: "Hit the + button to add a new item.",\n});\n\nconst item3 = new Item({\n  name: "<-- Hit this to delete an item.",\n});\n\nconst defaultItems = [item1, item2, item3];\n\n// insert test items into db\n// synchronous version\n// const inserted = await Item.insertMany(defaultItems);\n// console.log(inserted);\n\n// async version\n// Item.insertMany(defaultItems, (err, items) => {\n//     if (err) {\n//         console.log(err);\n//     } else {\n//         console.log("Inserted: " + items);\n//     }\n// });\n\n// -----------------------------------------------------------------------------------\n// ---------------------------------- Listening --------------------------------------\n// -----------------------------------------------------------------------------------\napp.listen(port, () => {\n  console.log(`Server is listening on port ${port}`);\n});\n\n// -----------------------------------------------------------------------------------\n// --------------------------------- Get Requests ------------------------------------\n// -----------------------------------------------------------------------------------\n// normal page for the day\napp.get("/", (req, res) => {\n  // let day = date.getDate();\n  let day = "Today";\n  Item.find((err, items) => {\n    if (err) {\n      console.log(err);\n    } else {\n      if (items.length === 0) {\n        // if nothing currently in collection, populate with starting items\n        Item.insertMany(defaultItems, (err, insertedItems) => {\n          if (err) {\n            console.log(err);\n          } else {\n            console.log("Inserted: " + insertedItems);\n            res.redirect("/"); // reload so we get the items we just inserted\n          }\n        });\n      } else {\n        // if already items in collection, just show them\n        res.render("list", { listName: day, items: items });\n      }\n    }\n  });\n});\n\n// -----------------------------------------------------------------------------------\n// about me page\napp.get("/about", (req, res) => {\n  res.render("about", {});\n});\n\n// -----------------------------------------------------------------------------------\n// pages for any other list you want to create\napp.get("/:listName", (req, res) => {\n  const listName = _.lowerCase(req.params.listName);\n\n  // determine if list already exists\n  List.findOne({ name: listName }, (err, foundList) => {\n    if (err) {\n      console.log(err);\n    } else {\n      if (!foundList) {\n        // list doesn\'t exists, so create it and then display\n        const list = new List({\n          name: listName,\n          items: defaultItems,\n        });\n\n        list.save();\n\n        res.redirect("/" + listName);\n      } else {\n        // list exists, so just display it\n        res.render("list", {\n          listName: _.capitalize(foundList.name),\n          items: foundList.items,\n        });\n      }\n    }\n  });\n});\n\n// -----------------------------------------------------------------------------------\n// -------------------------------- Post Requests ------------------------------------\n// -----------------------------------------------------------------------------------\n//  add new item to Todo List\napp.post("/newItem", (req, res) => {\n  const listName = _.lowerCase(req.body.list);\n  const itemName = req.body.newItem;\n\n  const newItem = new Item({\n    name: itemName,\n  });\n\n  if (req.body.list === "Today") {\n    console.log("new item: " + itemName);\n\n    // add new item into items collection\n    newItem.save();\n\n    // reload\n    res.redirect("/");\n  } else {\n    console.log("new item: " + itemName);\n\n    List.findOne({ name: listName }, (err, foundList) => {\n      if (err) {\n        console.log(err);\n      } else {\n        foundList.items.push(newItem);\n        foundList.save();\n\n        // reload\n        res.redirect("/" + listName);\n      }\n    });\n  }\n});\n\n// -----------------------------------------------------------------------------------\n//  delete an item from Todo List\napp.post("/deleteItem", (req, res) => {\n  const checkedItemId = req.body.checkbox;\n  const listName = _.lowerCase(req.body.listName);\n\n  if (listName === "today") {\n    // delete the item is question. Could also use .findByIdAndRemove()\n    Item.deleteOne({ _id: checkedItemId })\n      .then(() => {\n        console.log("Deleted item with _id: " + checkedItemId); // success\n        res.redirect("/");\n      })\n      .catch((err) => {\n        console.log(err); // failure\n      });\n  } else {\n    // find list, and delete from list array the specifc item\n    List.findOneAndUpdate(\n      { name: listName },\n      { $pull: { items: { _id: checkedItemId } } },\n      (err, foundList) => {\n        if (err) {\n          console.log(err);\n        } else {\n          res.redirect("/" + listName);\n        }\n      }\n    );\n  }\n});\n')))}c.isMDXComponent=!0}}]);