"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2821],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var s=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=s.createContext({}),m=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=m(e.components);return s.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},u=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=m(t),u=o,f=p["".concat(l,".").concat(u)]||p[u]||c[u]||r;return t?s.createElement(f,i(i({ref:n},d),{},{components:t})):s.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var m=2;m<r;m++)i[m]=t[m];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}u.displayName="MDXCreateElement"},403:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>m});var s=t(7462),o=(t(7294),t(3905));const r={sidebar_position:3},i="EJS",a={unversionedId:"Back End/ejs",id:"Back End/ejs",title:"EJS",description:"EJS is a templating system for node which allows you to create HTML templates that can be edited using the server. It allows for less duplication of work, so you don't have to send a completely different HTML file for every case.",source:"@site/docs/Back End/ejs.md",sourceDirName:"Back End",slug:"/Back End/ejs",permalink:"/docs/Back End/ejs",draft:!1,editUrl:"https://github.com/Boston343/web-dev-docs/docs/Back End/ejs.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Express",permalink:"/docs/Back End/express"},next:{title:"Databases",permalink:"/docs/category/databases"}},l={},m=[{value:"Installing EJS",id:"installing-ejs",level:2},{value:"Using EJS with Express",id:"using-ejs-with-express",level:2},{value:"Sending Variables with EJS",id:"sending-variables-with-ejs",level:2},{value:"Running Code Inside EJS Template",id:"running-code-inside-ejs-template",level:2},{value:"Using EJS Templates",id:"using-ejs-templates",level:2},{value:"Example Project",id:"example-project",level:2}],d={toc:m};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,s.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ejs"},"EJS"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://ejs.co/"},"EJS"))," is a templating system for node which allows you to create HTML templates that can be edited using the server. It allows for less duplication of work, so you don't have to send a completely different HTML file for every case."),(0,o.kt)("p",null,"EJS works using tags. These tags can be found under the ",(0,o.kt)("em",{parentName:"p"},"tags")," section of ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://ejs.co/#docs"},"docs")),"."),(0,o.kt)("h2",{id:"installing-ejs"},"Installing EJS"),(0,o.kt)("p",null,"Inside your node project run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install ejs\n")),(0,o.kt)("h2",{id:"using-ejs-with-express"},"Using EJS with Express"),(0,o.kt)("p",null,"You will need a ",(0,o.kt)("inlineCode",{parentName:"p"},"views")," folder, which will be where your ",(0,o.kt)("inlineCode",{parentName:"p"},".ejs")," templates go."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Good documentation of setup and usage of EJS with Express can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mde/ejs/wiki/Using-EJS-with-Express"},"here"),".")),(0,o.kt)("h2",{id:"sending-variables-with-ejs"},"Sending Variables with EJS"),(0,o.kt)("p",null,"You need a ",(0,o.kt)("inlineCode",{parentName:"p"},".ejs")," file, which is like HTML but with added features for this templating purpose."),(0,o.kt)("p",null,"In the EJS file you use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="test.ejs"',title:'"test.ejs"'},"<%=varName %>\n")),(0,o.kt)("p",null,"In the server you use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="app.js"',title:'"app.js"'},'res.render("test.ejs", { varName: "dataToPut" });\n')),(0,o.kt)("p",null,"Most people will use the same name in both spots, like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var day = "Monday";\nres.render("ejsFileName", { day: day });\n')),(0,o.kt)("h2",{id:"running-code-inside-ejs-template"},"Running Code Inside EJS Template"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("em",{parentName:"p"},"scriplet")," tags in your HTML inside ",(0,o.kt)("inlineCode",{parentName:"p"},".ejs")," files. They need to be used on EVERY line with javascript."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="example.ejs"',title:'"example.ejs"'},'<% if ( day==="Saturday" || day==="Sunday" ) { %>\n  <h1 style="color: purple"><%= day %> Todo List</h1>\n<% } %>\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Scriplet tags only work for control flow purposes.")),(0,o.kt)("h2",{id:"using-ejs-templates"},"Using EJS Templates"),(0,o.kt)("p",null,"For repetitive elements on pages (with headers and footers being a good example), you can create an EJS template for them and include them on every other page."),(0,o.kt)("p",null,"Lets say we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"header.ejs")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"footer.ejs")," for the below example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="page.ejs"',title:'"page.ejs"'},"<%- include('header'); -%>\n<h1>Title</h1>\n<p>My page</p>\n<%- include('footer'); -%>\n")),(0,o.kt)("h2",{id:"example-project"},"Example Project"),(0,o.kt)("p",null,"For an example project, see TodoList ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/Boston343/TodoList"},"code")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="TodoList: list.ejs"',title:'"TodoList:','list.ejs"':!0},'<%- include(\'header\'); -%>\n\n<div class="box" id="heading">\n  <h1><%= listName %></h1>\n</div>\n<div class="box">\n  \x3c!-- add li for every item in our \'items\' array --\x3e\n  <% items.forEach((item) => { %>\n  <form class="item" action="/deleteItem" method="post">\n    <input\n      onChange="this.form.submit()"\n      name="checkbox"\n      value="<%=item._id%>"\n      type="checkbox"\n    />\n    <input type="hidden" name="listName" value="<%= listName %>" />\n    <p><%= item.name %></p>\n  </form>\n  <% }); %>\n  <form class="item newItem" action="/newItem" method="post">\n    <input\n      type="text"\n      name="newItem"\n      placeholder="New Item"\n      autocomplete="off"\n    />\n    <button type="submit" name="list" value="<%= listName %>">+</button>\n  </form>\n</div>\n\n<%- include(\'footer\'); -%>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodoList: app.js"',title:'"TodoList:','app.js"':!0},'// npm and express includes\nimport express from "express";\nimport mongoose from "mongoose";\nimport dotenv from "dotenv";\nimport path from "path";\nimport { fileURLToPath } from "url";\nimport _ from "lodash";\n// import https from "https"; // for forming external get requests\n\n// local includes\nimport * as date from "./src/date.js";\n\ndotenv.config(); // gets the .env data for use with process.env.\nconst app = express();\napp.set("view engine", "ejs"); // using EJS\nconst port = process.env.PORT || 3000;\napp.use(express.urlencoded({ extended: true })); // this is for parsing data from html form\n\n// __dirname is only available with CJS. Since I am using ESM I need to get it another way\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// static items like other js or css files will not load unless you define where the server should\n//      start looking for those files.\napp.use(express.static(path.join(__dirname, "/public")));\n\n// -----------------------------------------------------------------------------------\n// ------------------------------- Mongoose Setup ------------------------------------\n// -----------------------------------------------------------------------------------\n// connect to MongoDB - local connection\n// mongoose.connect("mongodb://localhost:27017/todolistDB", {\n//     useNewUrlParser: true,\n// });\n// connect to MongoDB Atlas (the cloud)\nmongoose.connect(\n  "mongodb+srv://" +\n    process.env.MONGODB_USER +\n    ":" +\n    process.env.MONGODB_PASS +\n    "@cluster0.ovomich.mongodb.net/todolistDB?retryWrites=true&w=majority",\n  {\n    useNewUrlParser: true,\n  }\n);\n\n// schema\nconst itemSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: [true, "Please type something in for your item name."],\n  },\n});\n\nconst listSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  items: [itemSchema],\n});\n\n// model: mongoose will auto make it plural "items"\nconst Item = mongoose.model("Item", itemSchema);\n\nconst List = mongoose.model("List", listSchema);\n\n// -----------------------------------------------------------------------------------\n// testing\n\n// remove all items\n// synchronous version\n// const deleted = await Item.deleteMany({});\n// if (deleted.deletedCount >= 1) {\n//     console.log("Deleted " + deleted.deletedCount + " items.");\n// } else {\n//     console.log("ERROR in deleting items. No items deleted.");\n// }\n\n// async version\n// Item.deleteMany({}, (err, ret) => {\n//     if (err) {\n//         console.log(err);\n//     } else {\n//         console.log("Deleted " + ret.deletedCount + " items.");\n//     }\n// });\n\nconst item1 = new Item({\n  name: "Welcome to your todo list!",\n});\n\nconst item2 = new Item({\n  name: "Hit the + button to add a new item.",\n});\n\nconst item3 = new Item({\n  name: "<-- Hit this to delete an item.",\n});\n\nconst defaultItems = [item1, item2, item3];\n\n// insert test items into db\n// synchronous version\n// const inserted = await Item.insertMany(defaultItems);\n// console.log(inserted);\n\n// async version\n// Item.insertMany(defaultItems, (err, items) => {\n//     if (err) {\n//         console.log(err);\n//     } else {\n//         console.log("Inserted: " + items);\n//     }\n// });\n\n// -----------------------------------------------------------------------------------\n// ---------------------------------- Listening --------------------------------------\n// -----------------------------------------------------------------------------------\napp.listen(port, () => {\n  console.log(`Server is listening on port ${port}`);\n});\n\n// -----------------------------------------------------------------------------------\n// --------------------------------- Get Requests ------------------------------------\n// -----------------------------------------------------------------------------------\n// normal page for the day\napp.get("/", (req, res) => {\n  // let day = date.getDate();\n  let day = "Today";\n  Item.find((err, items) => {\n    if (err) {\n      console.log(err);\n    } else {\n      if (items.length === 0) {\n        // if nothing currently in collection, populate with starting items\n        Item.insertMany(defaultItems, (err, insertedItems) => {\n          if (err) {\n            console.log(err);\n          } else {\n            console.log("Inserted: " + insertedItems);\n            res.redirect("/"); // reload so we get the items we just inserted\n          }\n        });\n      } else {\n        // if already items in collection, just show them\n        res.render("list", { listName: day, items: items });\n      }\n    }\n  });\n});\n\n// -----------------------------------------------------------------------------------\n// about me page\napp.get("/about", (req, res) => {\n  res.render("about", {});\n});\n\n// -----------------------------------------------------------------------------------\n// pages for any other list you want to create\napp.get("/:listName", (req, res) => {\n  const listName = _.lowerCase(req.params.listName);\n\n  // determine if list already exists\n  List.findOne({ name: listName }, (err, foundList) => {\n    if (err) {\n      console.log(err);\n    } else {\n      if (!foundList) {\n        // list doesn\'t exists, so create it and then display\n        const list = new List({\n          name: listName,\n          items: defaultItems,\n        });\n\n        list.save();\n\n        res.redirect("/" + listName);\n      } else {\n        // list exists, so just display it\n        res.render("list", {\n          listName: _.capitalize(foundList.name),\n          items: foundList.items,\n        });\n      }\n    }\n  });\n});\n\n// -----------------------------------------------------------------------------------\n// -------------------------------- Post Requests ------------------------------------\n// -----------------------------------------------------------------------------------\n//  add new item to Todo List\napp.post("/newItem", (req, res) => {\n  const listName = _.lowerCase(req.body.list);\n  const itemName = req.body.newItem;\n\n  const newItem = new Item({\n    name: itemName,\n  });\n\n  if (req.body.list === "Today") {\n    console.log("new item: " + itemName);\n\n    // add new item into items collection\n    newItem.save();\n\n    // reload\n    res.redirect("/");\n  } else {\n    console.log("new item: " + itemName);\n\n    List.findOne({ name: listName }, (err, foundList) => {\n      if (err) {\n        console.log(err);\n      } else {\n        foundList.items.push(newItem);\n        foundList.save();\n\n        // reload\n        res.redirect("/" + listName);\n      }\n    });\n  }\n});\n\n// -----------------------------------------------------------------------------------\n//  delete an item from Todo List\napp.post("/deleteItem", (req, res) => {\n  const checkedItemId = req.body.checkbox;\n  const listName = _.lowerCase(req.body.listName);\n\n  if (listName === "today") {\n    // delete the item is question. Could also use .findByIdAndRemove()\n    Item.deleteOne({ _id: checkedItemId })\n      .then(() => {\n        console.log("Deleted item with _id: " + checkedItemId); // success\n        res.redirect("/");\n      })\n      .catch((err) => {\n        console.log(err); // failure\n      });\n  } else {\n    // find list, and delete from list array the specifc item\n    List.findOneAndUpdate(\n      { name: listName },\n      { $pull: { items: { _id: checkedItemId } } },\n      (err, foundList) => {\n        if (err) {\n          console.log(err);\n        } else {\n          res.redirect("/" + listName);\n        }\n      }\n    );\n  }\n});\n')))}p.isMDXComponent=!0}}]);