"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2716],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(n),c=s,h=u["".concat(p,".").concat(c)]||u[c]||d[c]||o;return n?r.createElement(h,a(a({ref:t},m),{},{components:n})):r.createElement(h,a({ref:t},m))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3060:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const o={sidebar_position:2},a="Express",i={unversionedId:"Back End/express",id:"Back End/express",title:"Express",description:"Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.",source:"@site/docs/Back End/express.md",sourceDirName:"Back End",slug:"/Back End/express",permalink:"/docs/Back End/express",draft:!1,editUrl:"https://github.com/Boston343/web-dev-docs/docs/Back End/express.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Node",permalink:"/docs/Back End/node"},next:{title:"EJS",permalink:"/docs/Back End/ejs"}},p={},l=[{value:"Setup",id:"setup",level:2},{value:"Express Routing",id:"express-routing",level:2},{value:"Request Methods",id:"request-methods",level:3},{value:"Simple Routes",id:"simple-routes",level:3},{value:"app.route()",id:"approute",level:3},{value:"Nodemon",id:"nodemon",level:2},{value:"Express Starter Code",id:"express-starter-code",level:2},{value:"Example Project",id:"example-project",level:2}],m={toc:l};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"express"},"Express"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://expressjs.com/"},"Express"))," is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"This requires ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"node"},"Node"))," installed and setup.")),(0,s.kt)("h2",{id:"setup"},"Setup"),(0,s.kt)("p",null,"In Hyper, create a new project, create file ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"app.js")," and run ",(0,s.kt)("inlineCode",{parentName:"p"},"npm init"),' to generate "package.json" file.'),(0,s.kt)("p",null,"Now in the folder run ",(0,s.kt)("inlineCode",{parentName:"p"},"npm install express")),(0,s.kt)("h2",{id:"express-routing"},"Express Routing"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://expressjs.com/en/starter/basic-routing.html"},"Routing"))," refers to how an application\u2019s endpoints (URIs) respond to client requests."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Express documentation on routing can be found ",(0,s.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/routing.html"},"here"),".")),(0,s.kt)("h3",{id:"request-methods"},"Request Methods"),(0,s.kt)("p",null,"Express routing is modeled off of the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods"},"HTTP request methods")),"."),(0,s.kt)("p",null,"You define routing using methods of the Express ",(0,s.kt)("inlineCode",{parentName:"p"},"app")," object that correspond to HTTP methods."),(0,s.kt)("h3",{id:"simple-routes"},"Simple Routes"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Respond with Hello World! on the homepage"',title:'"Respond',with:!0,Hello:!0,"World!":!0,on:!0,the:!0,'homepage"':!0},'app.get("/", (req, res) => {\n  res.send("Hello World!");\n});\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Respond to POST request on the root route (/), the application\u2019s home page"',title:'"Respond',to:!0,POST:!0,request:!0,on:!0,the:!0,root:!0,route:!0,"(/),":!0,"application\u2019s":!0,home:!0,'page"':!0},'app.post("/", (req, res) => {\n  res.send("Got a POST request");\n});\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Respond to a PUT request to the /user route"',title:'"Respond',to:!0,a:!0,PUT:!0,request:!0,the:!0,"/user":!0,'route"':!0},'app.put("/user", (req, res) => {\n  res.send("Got a PUT request at /user");\n});\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Respond to a DELETE request to the /user route"',title:'"Respond',to:!0,a:!0,DELETE:!0,request:!0,the:!0,"/user":!0,'route"':!0},'app.delete("/user", (req, res) => {\n  res.send("Got a DELETE request at /user");\n});\n')),(0,s.kt)("h3",{id:"approute"},"app.route()"),(0,s.kt)("p",null,"If you have multiple things (like GET, PUT, DELETE) that all have the same route, you can combine them like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// put the get, put, and delete functions are separate lines\n// and treat them like app.get("/theRoute"), etc\napp\n  .route("/theRoute")\n\n  .get()\n\n  .put()\n\n  .delete();\n')),(0,s.kt)("h2",{id:"nodemon"},"Nodemon"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://nodemon.io/"},"Nodemon"))," enables the server to auto-restart on changes. This is very useful for development / testing."),(0,s.kt)("p",null,"Install with ",(0,s.kt)("inlineCode",{parentName:"p"},"npm install -g nodemon"),"."),(0,s.kt)("p",null,"Then in your project run ",(0,s.kt)("inlineCode",{parentName:"p"},"nodemon app.js")," (or whatever your server js file is)."),(0,s.kt)("p",null,"Now, when you save changes, the server is automatically restarted with the new changes."),(0,s.kt)("h2",{id:"express-starter-code"},"Express Starter Code"),(0,s.kt)("p",null,"If using CSM you can follow ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://expressjs.com/en/starter/hello-world.html"},"this")),"."),(0,s.kt)("p",null,"If using ESM (",(0,s.kt)("em",{parentName:"p"},"do itttttt"),') don\'t forget to add the line in "package.json" of ',(0,s.kt)("inlineCode",{parentName:"p"},'"type": "module",'),". Then:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="app.js"',title:'"app.js"'},'import express from "express"; // npm install express\nimport dotenv from "dotenv"; // npm install dotenv\nimport path from "path";\nimport { fileURLToPath } from "url";\n\n// __dirname is only available with CJS. Since I am using ESM I need to get it another way\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// static items like other js or css files will not load unless you define where the server should\n//      start looking for those files.\napp.use(express.static(path.join(__dirname, "/public")));\n\n// setup express\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// this is for parsing data from html form\napp.use(express.urlencoded({ extended: true }));\n\napp.listen(port, () => {\n  console.log(`Server is listening on port ${port} at \\"localhost:${port}\\"`);\n});\n\napp.get("/", (req, res) => {\n  console.log("Server is up and running.");\n  // This tells server what to do when someone goes to \'/\' which is the website root.\n  // \'req\' is the request - has a ton of browser information of requester\n  // \'res\' is the response - what server sends back to user\n});\n')),(0,s.kt)("h2",{id:"example-project"},"Example Project"),(0,s.kt)("p",null,"For a fairly basic example project, see Newsletter-Signup ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://github.com/Boston343/Newsletter-Signup"},"code"))," and ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://fast-bald-mammal.glitch.me/"},"website"))),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"This is hosted for free on Glitch.com, and will likely take a few seconds to wake up.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import express from "express"; // npm install express\nimport dotenv from "dotenv"; // npm install dotenv\nimport path from "path";\nimport https from "https"; // for forming external get requests\nimport { fileURLToPath } from "url";\n\ndotenv.config(); // gets the .env data for use with process.env.\nconst app = express();\nconst port = process.env.PORT || 3000;\napp.use(express.urlencoded({ extended: true })); // this is for parsing data from html form\n\n// __dirname is only available with CJS. Since I am using ESM I need to get it another way\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// static items like other js or css files will not load unless you define where the server should\n//      start looking for those files.\napp.use(express.static(path.join(__dirname, "/public")));\n\n// -------------------------------------------------------------\n// ---------------------- Listening ----------------------------\n// -------------------------------------------------------------\napp.listen(port, () => {\n  console.log(`Server is listening on port ${port} at \\"localhost:${port}\\"`);\n});\n\n// -------------------------------------------------------------\n// --------------------- Get Requests --------------------------\n// -------------------------------------------------------------\napp.get("/", (req, res) => {\n  console.log("Server is up and running.");\n\n  const fileName = "signup.html";\n  res.sendFile(path.join(__dirname, "/src/" + fileName));\n  console.log("Sent:", __dirname + "/src/" + fileName);\n});\n\n// -------------------------------------------------------------\n// -------------------- Post Requests --------------------------\n// -------------------------------------------------------------\n//  main functionality\napp.post("/", (req, res) => {\n  const firstName = req.body.firstName;\n  const lastName = req.body.lastName;\n  const email = req.body.email;\n\n  // console.log("First Name: " + firstName);\n  // console.log("Last Name: " + lastName);\n  // console.log("Email: " + email);\n\n  // create mailchimp data JSON to batch subscribe or unsubscribe users\n  // https://mailchimp.com/developer/marketing/api/list-member-events/\n  const newData = {\n    members: [\n      {\n        email_address: email,\n        status: "subscribed",\n        merge_fields: {\n          FNAME: firstName,\n          LNAME: lastName,\n        },\n      },\n    ],\n  };\n\n  // turn the JSON object into one long string for sending\n  const jsonData = JSON.stringify(newData);\n\n  // setup mailchimp post request\n  const mailchimpURL =\n    "https://" +\n    process.env.MAILCHIMP_SERVER +\n    ".api.mailchimp.com/3.0/lists/" +\n    process.env.MAILCHIMP_LISTID;\n  const options = {\n    method: "POST",\n    auth: "Reap3r:" + process.env.MAILCHIMP_KEY,\n  };\n\n  // create mailchimp post request\n  const mailchimpRequest = https.request(mailchimpURL, options, (response) => {\n    console.log(\n      "status: " + response.statusMessage + " (" + response.statusCode + ")"\n    );\n    response.on("data", (data) => {\n      console.log(JSON.parse(data));\n      var mailchimpResponse = JSON.parse(data);\n\n      var htmlResponsePage;\n      if (response.statusCode === 200) {\n        if (mailchimpResponse.error_count === 0) {\n          // send success feedback to user\n          htmlResponsePage = "success.html";\n        } else {\n          htmlResponsePage = "failure.html";\n          var error_code = mailchimpResponse.errors[0].error_code;\n          var error = mailchimpResponse.errors[0].error;\n          // mailchimp has identified an error, log it\n          // res.send("<h3>" + error_code + ": " + error + "</h3>");\n          console.log("Mailchimp error: " + error_code + ": " + error);\n        }\n      } else {\n        // send failure feedback to user\n        htmlResponsePage = "failure.html";\n      }\n\n      res.sendFile(path.join(__dirname, "/src/" + htmlResponsePage));\n      console.log("Sent: " + __dirname + "/src/" + htmlResponsePage);\n    });\n  });\n\n  // make mailchimp post request with our data to add a person to email list\n  mailchimpRequest.write(jsonData);\n  mailchimpRequest.end();\n});\n\n// -------------------------------------------------------------\n//  failure page functionality for button to try again\napp.post("/failure", (req, res) => {\n  res.redirect("/");\n});\n')))}u.isMDXComponent=!0}}]);